package com.damon.core;import org.apache.curator.framework.CuratorFramework;import org.apache.curator.framework.recipes.cache.ChildData;import org.apache.curator.framework.recipes.cache.NodeCache;import org.apache.zookeeper.data.Stat;import org.slf4j.Logger;import org.slf4j.LoggerFactory;/** * 功能： * * @author Damon * @since 2017/12/25 15:09 */public class ZookeeperConfig {    private static final Logger log = LoggerFactory.getLogger(ZookeeperConfig.class);    public static byte[] getConfig(CuratorFramework client, String path) throws Exception {        if (!exists(client, path)) {            throw new IllegalArgumentException("" + path + " 不存在。");        }        /*List<String> strings = client.getChildren().forPath(path);        System.out.println(strings);*/        listener(client, path);        return client.getData().forPath(path);    }    private static boolean exists(CuratorFramework client, String path) throws Exception {        Stat stat = client.checkExists().forPath(path);        return stat != null;    }    private static void listener(CuratorFramework client, String path) throws Exception {        //设置节点的cache        final NodeCache nodeCache = new NodeCache(client, path, false);        nodeCache.getListenable().addListener(() -> {            log.info("节点数据发生变更:");            ChildData childData = nodeCache.getCurrentData();            log.info("ZNode节点路径, path={}", childData.getPath());            String data = new String(childData.getData());            log.info("ZNode节点状态改变, data=\n{}", data);            PropertiesUtils.modifyProperties(data);        });        nodeCache.start();    }}